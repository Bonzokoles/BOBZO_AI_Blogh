---
/**
 * Experiments Page - Bonzo Door Sales Avatar
 * Interactive AI avatar for PORTA door sales
 */
import Layout from '@layouts/Layout.astro';
import PageHeader from '@components/Astro/PageHeader.astro';
import coverImage from '@assets/alk-cover-2.webp';
---

<Layout
  title="Eksperymenty - Bonzo Sprzedawca Drzwi"
  description="Poznaj Bonzo - AI awatara sprzedającego drzwi PORTA. Interaktywny asystent z pełną wiedzą o modelach, cenach i parametrach technicznych."
>
  <PageHeader
    heading="Bonzo - Twój Ekspert od Drzwi PORTA"
    description="Interaktywny awatar AI z pełną wiedzą o drzwiach PORTA. Zadaj pytanie o modele, ceny, parametry techniczne!"
    image={coverImage}
    imageAlt="Bonzo AI - Ekspert od drzwi PORTA"
    animate={true}
  />

  <section class="container mx-auto px-4 py-12">
    <div class="max-w-4xl mx-auto">
      <!-- Video Section -->
      <!-- Video Grid: Two videos side by side -->
      <div class="grid md:grid-cols-2 gap-4 mb-8">
        <div class="video-container rounded-lg overflow-hidden shadow-lg">
          <video
            id="bonzo-video-1"
            class="w-full"
            controls
            autoplay
            muted
            loop
            poster="https://pub-25059caf15274ebd844548094bfb4dc1.r2.dev/alk4.png"
          >
            <source src="https://pub-25059caf15274ebd844548094bfb4dc1.r2.dev/DD1.mp4" type="video/mp4" />
            Twoja przeglądarka nie obsługuje wideo HTML5.
          </video>
          <p class="text-center text-sm text-gray-600 dark:text-gray-400 mt-2">Prezentacja Bonzo</p>
        </div>

        <div class="video-container rounded-lg overflow-hidden shadow-lg">
          <video
            id="bonzo-video-2"
            class="w-full"
            controls
            muted
            loop
            poster="https://pub-25059caf15274ebd844548094bfb4dc1.r2.dev/alk4.png"
          >
            <source src="https://pub-25059caf15274ebd844548094bfb4dc1.r2.dev/avatar/bonzo-intro.mp4" type="video/mp4" />
            Twoja przeglądarka nie obsługuje wideo HTML5.
          </video>
          <p class="text-center text-sm text-gray-600 dark:text-gray-400 mt-2">Intro Video</p>
        </div>
      </div>

      <!-- Chat Interface -->
      <div class="chat-container bg-gray-100 dark:bg-gray-800 rounded-lg p-6 shadow-lg">
        <h2 class="text-2xl font-bold mb-4 text-center">Czat z Bonzo</h2>

        <!-- Mode Toggle -->
        <div class="flex justify-center gap-4 mb-6">
          <button
            id="text-mode-btn"
            class="mode-btn active px-6 py-2 rounded-lg font-semibold transition-all duration-200"
          >
            💬 Tekst
          </button>
          <button
            id="voice-mode-btn"
            class="mode-btn px-6 py-2 rounded-lg font-semibold transition-all duration-200"
          >
            🎤 Głos (Realtime)
          </button>
        </div>

        <p id="mode-description" class="text-center mb-6 text-gray-600 dark:text-gray-300">
          Zapytaj o modele PORTA, ceny, parametry techniczne lub porady przy wyborze drzwi!
        </p>

        <!-- Voice Interface (hidden by default) -->
        <div id="voice-interface" class="hidden">
          <div class="flex flex-col items-center gap-4 mb-6">
            <button
              id="voice-start-btn"
              class="px-8 py-4 bg-green-600 hover:bg-green-700 text-white rounded-full font-semibold text-lg transition-all duration-200 flex items-center gap-2"
            >
              <span class="text-2xl">🎤</span>
              <span>Rozpocznij Rozmowę</span>
            </button>
            <button
              id="voice-stop-btn"
              class="hidden px-8 py-4 bg-red-600 hover:bg-red-700 text-white rounded-full font-semibold text-lg transition-all duration-200 flex items-center gap-2"
            >
              <span class="text-2xl">🛑</span>
              <span>Zakończ Rozmowę</span>
            </button>
            <div id="voice-status" class="text-sm text-gray-500 dark:text-gray-400">
              Naciśnij przycisk aby rozpocząć rozmowę głosową
            </div>
          </div>
        </div>

        <!-- Text Interface (shown by default) -->
        <div id="text-interface">
          <div id="chat-messages" class="chat-messages bg-white dark:bg-gray-900 rounded-lg p-4 mb-4 h-96 overflow-y-auto">
            <div class="message bot-message mb-4">
              <div class="font-bold text-blue-600 dark:text-blue-400 mb-1">Bonzo:</div>
              <div class="text-gray-800 dark:text-gray-200">
                Cześć! Jestem Bonzo, Twój ekspert od drzwi PORTA. Pomogę Ci wybrać idealne drzwi!
                Mamy 5 świetnych modeli - od stylowych FOCUS PREMIUM (od 1033 PLN) po eleganckie VERTE HOME.
                Zadaj pytanie o ceny, parametry lub pomoc w wyborze!
              </div>
            </div>
          </div>

          <div class="chat-input flex gap-2">
            <input
              type="text"
              id="user-input"
              placeholder="Zapytaj o drzwi PORTA..."
              class="flex-1 px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
            />
            <button
              id="send-btn"
              class="px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-semibold transition-colors duration-200"
            >
              Wyślij
            </button>
          </div>

          <div class="mt-4 text-sm text-gray-500 dark:text-gray-400 text-center">
            💡 Przykłady: "Jakie masz modele?", "Ile kosztuje FOCUS PREMIUM?", "Które drzwi mają szkło?"
          </div>
        </div>
      </div>

      <!-- Knowledge Base -->
      <div class="mt-12 grid md:grid-cols-2 gap-6">
        <div class="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg">
          <h3 class="text-xl font-bold mb-4">📋 Dostępne Modele</h3>
          <ul class="space-y-2 text-sm">
            <li>✅ PORTA FOCUS PREMIUM 5.A - od 1033 PLN</li>
            <li>✅ PORTA FACTOR 5 - od 629 PLN</li>
            <li>✅ PORTA DESIRE 5</li>
            <li>✅ PORTA ART DECO 5</li>
            <li>✅ PORTA VERTE HOME H.5</li>
          </ul>
        </div>

        <div class="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg">
          <h3 class="text-xl font-bold mb-4">📞 Kontakt</h3>
          <div class="text-sm space-y-2">
            <p><strong>Sprzedawca:</strong> Norbert</p>
            <p><strong>Telefon:</strong> 790 645 410</p>
            <p><strong>Dostępność:</strong> po 23:00 w środę</p>
            <p class="text-xs text-gray-500 mt-4">
              Możesz też kontaktować się mailowo dla szczegółów
            </p>
          </div>
        </div>
      </div>
    </div>
  </section>
</Layout>

<style>
  .chat-messages {
    scrollbar-width: thin;
  }

  .message {
    animation: fadeIn 0.3s ease-in;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }

  .bot-message {
    background: #e3f2fd;
    padding: 1rem;
    border-radius: 0.5rem;
    border-left: 4px solid #2196f3;
  }

  .user-message {
    background: #f5f5f5;
    padding: 1rem;
    border-radius: 0.5rem;
    border-left: 4px solid #4caf50;
  }

  .dark .bot-message {
    background: #1e3a5f;
    border-left-color: #64b5f6;
  }

  .dark .user-message {
    background: #2d2d2d;
    border-left-color: #81c784;
  }

  /* Mode Toggle Styles */
  .mode-btn {
    border: 2px solid #e0e0e0;
    background: white;
    color: #666;
  }

  .mode-btn.active {
    background: #2196f3;
    border-color: #2196f3;
    color: white;
  }

  .dark .mode-btn {
    background: #2d2d2d;
    border-color: #444;
    color: #ccc;
  }

  .dark .mode-btn.active {
    background: #1976d2;
    border-color: #1976d2;
    color: white;
  }

  /* Voice Animation */
  @keyframes pulse {
    0%, 100% { transform: scale(1); opacity: 1; }
    50% { transform: scale(1.1); opacity: 0.8; }
  }

  .voice-active {
    animation: pulse 2s infinite;
  }
</style>

<script>
  // UI Elements
  const chatMessages = document.getElementById('chat-messages');
  const userInput = document.getElementById('user-input') as HTMLInputElement;
  const sendBtn = document.getElementById('send-btn');
  const textModeBtn = document.getElementById('text-mode-btn');
  const voiceModeBtn = document.getElementById('voice-mode-btn');
  const textInterface = document.getElementById('text-interface');
  const voiceInterface = document.getElementById('voice-interface');
  const voiceStartBtn = document.getElementById('voice-start-btn');
  const voiceStopBtn = document.getElementById('voice-stop-btn');
  const voiceStatus = document.getElementById('voice-status');
  const modeDescription = document.getElementById('mode-description');

  // Voice state
  let voiceSession: WebSocket | null = null;
  let audioContext: AudioContext | null = null;
  let mediaStream: MediaStream | null = null;
  let isVoiceActive = false;

  // Mode Toggle
  textModeBtn?.addEventListener('click', () => {
    textModeBtn.classList.add('active');
    voiceModeBtn?.classList.remove('active');
    textInterface?.classList.remove('hidden');
    voiceInterface?.classList.add('hidden');
    if (modeDescription) modeDescription.textContent = 'Zapytaj o modele PORTA, ceny, parametry techniczne lub porady przy wyborze drzwi!';
    stopVoiceSession();
  });

  voiceModeBtn?.addEventListener('click', () => {
    voiceModeBtn.classList.add('active');
    textModeBtn?.classList.remove('active');
    voiceInterface?.classList.remove('hidden');
    textInterface?.classList.add('hidden');
    if (modeDescription) modeDescription.textContent = 'Kliknij przycisk i rozmawiaj z Bonzo głosowo! AI odpowie Ci w czasie rzeczywistym.';
  });

  // Voice Session Management
  voiceStartBtn?.addEventListener('click', startVoiceSession);
  voiceStopBtn?.addEventListener('click', stopVoiceSession);

  async function startVoiceSession() {
    try {
      updateVoiceStatus('Łączenie z Bonzo...');

      // Get session token
      const response = await fetch('/api/ai/bonzo-voice', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });

      if (!response.ok) throw new Error('Failed to create session');

      const { client_secret } = await response.json();

      // Request microphone access
      mediaStream = await navigator.mediaDevices.getUserMedia({ audio: true });

      // Initialize audio context
      audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();

      // Connect to WebSocket
      const wsUrl = `wss://api.openai.com/v1/realtime?model=gpt-4o-realtime-preview-2024-12-17`;
      voiceSession = new WebSocket(wsUrl, [], {
        headers: {
          'Authorization': `Bearer ${client_secret}`,
          'OpenAI-Beta': 'realtime=v1'
        }
      } as any);

      voiceSession.onopen = () => {
        updateVoiceStatus('✅ Połączono! Mów do mikrofonu...');
        voiceStartBtn?.classList.add('hidden');
        voiceStopBtn?.classList.remove('hidden');
        voiceStartBtn?.classList.add('voice-active');
        isVoiceActive = true;

        // Start audio capture
        startAudioCapture();
      };

      voiceSession.onmessage = (event) => {
        const data = JSON.parse(event.data);
        handleRealtimeEvent(data);
      };

      voiceSession.onerror = (error) => {
        console.error('WebSocket error:', error);
        updateVoiceStatus('❌ Błąd połączenia');
        stopVoiceSession();
      };

      voiceSession.onclose = () => {
        updateVoiceStatus('Rozłączono');
        stopVoiceSession();
      };

    } catch (error) {
      console.error('Voice session error:', error);
      updateVoiceStatus('❌ Nie udało się uruchomić rozmowy');
      stopVoiceSession();
    }
  }

  function stopVoiceSession() {
    isVoiceActive = false;

    if (voiceSession) {
      voiceSession.close();
      voiceSession = null;
    }

    if (mediaStream) {
      mediaStream.getTracks().forEach(track => track.stop());
      mediaStream = null;
    }

    if (audioContext) {
      audioContext.close();
      audioContext = null;
    }

    voiceStartBtn?.classList.remove('hidden', 'voice-active');
    voiceStopBtn?.classList.add('hidden');
    updateVoiceStatus('Naciśnij przycisk aby rozpocząć rozmowę głosową');
  }

  function updateVoiceStatus(message: string) {
    if (voiceStatus) voiceStatus.textContent = message;
  }

  function startAudioCapture() {
    if (!mediaStream || !audioContext || !voiceSession) return;

    const source = audioContext.createMediaStreamSource(mediaStream);
    const processor = audioContext.createScriptProcessor(4096, 1, 1);

    source.connect(processor);
    processor.connect(audioContext.destination);

    processor.onaudioprocess = (e) => {
      if (!isVoiceActive || !voiceSession || voiceSession.readyState !== WebSocket.OPEN) return;

      const inputData = e.inputBuffer.getChannelData(0);
      const pcm16 = convertFloat32ToPCM16(inputData);
      const base64Audio = arrayBufferToBase64(pcm16);

      voiceSession.send(JSON.stringify({
        type: 'input_audio_buffer.append',
        audio: base64Audio
      }));
    };
  }

  function handleRealtimeEvent(event: any) {
    console.log('Realtime event:', event.type);

    switch (event.type) {
      case 'response.audio.delta':
        playAudioDelta(event.delta);
        break;
      case 'response.audio_transcript.delta':
        updateVoiceStatus(`🔊 Bonzo: ${event.delta}`);
        break;
      case 'response.done':
        updateVoiceStatus('✅ Bonzo skończył mówić. Twoja kolej!');
        break;
      case 'input_audio_buffer.speech_started':
        updateVoiceStatus('🎤 Słucham...');
        break;
      case 'input_audio_buffer.speech_stopped':
        updateVoiceStatus('⏳ Przetwarzanie...');
        break;
      case 'error':
        console.error('Realtime error:', event.error);
        updateVoiceStatus(`❌ Błąd: ${event.error.message}`);
        break;
    }
  }

  function playAudioDelta(base64Audio: string) {
    if (!audioContext) return;

    const audioData = base64ToArrayBuffer(base64Audio);
    audioContext.decodeAudioData(audioData, (buffer) => {
      const source = audioContext!.createBufferSource();
      source.buffer = buffer;
      source.connect(audioContext!.destination);
      source.start();
    });
  }

  // Utility functions
  function convertFloat32ToPCM16(float32Array: Float32Array): ArrayBuffer {
    const pcm16 = new Int16Array(float32Array.length);
    for (let i = 0; i < float32Array.length; i++) {
      const s = Math.max(-1, Math.min(1, float32Array[i]));
      pcm16[i] = s < 0 ? s * 0x8000 : s * 0x7FFF;
    }
    return pcm16.buffer;
  }

  function arrayBufferToBase64(buffer: ArrayBuffer): string {
    const bytes = new Uint8Array(buffer);
    let binary = '';
    for (let i = 0; i < bytes.byteLength; i++) {
      binary += String.fromCharCode(bytes[i]);
    }
    return btoa(binary);
  }

  function base64ToArrayBuffer(base64: string): ArrayBuffer {
    const binaryString = atob(base64);
    const len = binaryString.length;
    const bytes = new Uint8Array(len);
    for (let i = 0; i < len; i++) {
      bytes[i] = binaryString.charCodeAt(i);
    }
    return bytes.buffer;
  }

  // Text Chat functionality
  async function sendMessage() {
    const message = userInput.value.trim();
    if (!message) return;

    addMessage('user', message);
    userInput.value = '';

    const typingId = addMessage('bot', 'Bonzo pisze...');

    try {
      const response = await fetch('/api/ai/bonzo-chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ message })
      });

      if (!response.ok) throw new Error('API error');

      const data = await response.json();
      document.getElementById(typingId)?.remove();
      addMessage('bot', data.reply);

    } catch (error) {
      document.getElementById(typingId)?.remove();
      addMessage('bot', 'Przepraszam, wystąpił problem. Spróbuj ponownie za chwilę.');
      console.error('Chat error:', error);
    }
  }

  function addMessage(type: 'user' | 'bot', text: string): string {
    const messageId = `msg-${Date.now()}`;
    const messageDiv = document.createElement('div');
    messageDiv.id = messageId;
    messageDiv.className = `message ${type}-message mb-4`;

    const senderName = type === 'bot' ? 'Bonzo' : 'Ty';
    const senderColor = type === 'bot' ? 'text-blue-600 dark:text-blue-400' : 'text-green-600 dark:text-green-400';

    messageDiv.innerHTML = `
      <div class="font-bold ${senderColor} mb-1">${senderName}:</div>
      <div class="text-gray-800 dark:text-gray-200">${text}</div>
    `;

    chatMessages?.appendChild(messageDiv);
    chatMessages?.scrollTo(0, chatMessages.scrollHeight);

    return messageId;
  }

  sendBtn?.addEventListener('click', sendMessage);
  userInput?.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') sendMessage();
  });
</script>
