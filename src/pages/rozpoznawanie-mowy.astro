---
import Layout from "@layouts/Layout.astro";

const title = "Rozpoznawanie Mowy AI | MyBonzo";
const description = "Bezpłatne narzędzie do rozpoznawania mowy z obsługą języka polskiego. Powered by Whisper AI - działa lokalnie w przeglądarce.";
---

<Layout title={title} description={description}>
  <div class="container mx-auto px-4 py-12 max-w-4xl">
    <div class="bg-gradient-to-br from-blue-900/30 to-purple-900/30 border-2 border-blue-500/50 rounded-2xl p-8 shadow-2xl">
      <h1 class="font-display text-5xl font-bold text-center mb-3 text-blue-400">
        🎤 Rozpoznawanie Mowy AI
      </h1>
      <p class="text-center text-cyan-300 mb-8 text-lg">
        Powered by Whisper • Działa lokalnie w przeglądarce
      </p>

      <div id="status" class="bg-blue-500/10 border border-blue-500/30 rounded-lg p-4 mb-6 text-center text-cyan-300">
        Inicjalizacja modelu AI...
      </div>

      <!-- Language Selection -->
      <div class="flex flex-wrap gap-3 justify-center mb-6">
        <button class="lang-btn active px-5 py-2 rounded-lg bg-blue-500/20 border border-blue-500 text-white hover:bg-blue-500/40 transition-all" data-lang="pl">
          🇵🇱 Polski
        </button>
        <button class="lang-btn px-5 py-2 rounded-lg bg-blue-500/20 border border-blue-500/30 text-white hover:bg-blue-500/40 transition-all" data-lang="en">
          🇬🇧 English
        </button>
        <button class="lang-btn px-5 py-2 rounded-lg bg-blue-500/20 border border-blue-500/30 text-white hover:bg-blue-500/40 transition-all" data-lang="de">
          🇩🇪 Deutsch
        </button>
        <button class="lang-btn px-5 py-2 rounded-lg bg-blue-500/20 border border-blue-500/30 text-white hover:bg-blue-500/40 transition-all" data-lang="es">
          🇪🇸 Español
        </button>
        <button class="lang-btn px-5 py-2 rounded-lg bg-blue-500/20 border border-blue-500/30 text-white hover:bg-blue-500/40 transition-all" data-lang="fr">
          🇫🇷 Français
        </button>
      </div>

      <!-- Controls -->
      <div class="flex gap-4 justify-center mb-6 flex-wrap">
        <button
          id="recordBtn"
          disabled
          class="px-8 py-4 bg-gradient-to-r from-blue-600 to-blue-800 text-white font-bold rounded-lg border-2 border-cyan-400 shadow-lg hover:shadow-cyan-400/50 transition-all disabled:opacity-50 disabled:cursor-not-allowed"
        >
          🎤 Rozpocznij nagrywanie
        </button>
        <button
          id="clearBtn"
          class="px-8 py-4 bg-gradient-to-r from-gray-600 to-gray-800 text-white font-bold rounded-lg border-2 border-gray-400 hover:shadow-lg transition-all"
        >
          🗑️ Wyczyść
        </button>
      </div>

      <!-- Output -->
      <div id="output" class="bg-black/40 border-2 border-blue-500/50 rounded-lg p-6 min-h-[200px] text-gray-300 leading-relaxed empty">
        Naciśnij przycisk nagrywania i zacznij mówić...
      </div>

      <!-- Info -->
      <div class="mt-8 p-6 bg-cyan-500/5 border border-cyan-500/30 rounded-lg text-sm leading-relaxed">
        <h3 class="text-cyan-300 font-bold mb-3 text-lg">ℹ️ Informacje</h3>
        <p class="mb-2"><strong class="text-cyan-400">Model:</strong> Whisper Base (OpenAI) - wersja ONNX dla przeglądarki</p>
        <p class="mb-2"><strong class="text-cyan-400">Języki:</strong> Polski, Angielski, Niemiecki, Hiszpański, Francuski i inne</p>
        <p class="mb-2"><strong class="text-cyan-400">Prywatność:</strong> Działa lokalnie - żadne dane nie są wysyłane na serwer</p>
        <p><strong class="text-cyan-400">Rozmiar:</strong> ~74 MB (pobierany raz i cachowany)</p>
      </div>
    </div>
  </div>
</Layout>

<script>
  // @ts-nocheck
  import { pipeline } from 'https://cdn.jsdelivr.net/npm/@huggingface/transformers@3.3.0';

  let transcriber = null;
  let mediaRecorder = null;
  let audioChunks = [];
  let isRecording = false;
  let selectedLanguage = 'pl';

  const statusEl = document.getElementById('status');
  const outputEl = document.getElementById('output');
  const recordBtn = document.getElementById('recordBtn');

  async function initModel() {
    try {
      statusEl.innerHTML = '⏳ Ładowanie modelu Whisper... (pierwsze uruchomienie ~1 min)';

      transcriber = await pipeline(
        'automatic-speech-recognition',
        'onnx-community/whisper-base'
      );

      statusEl.innerHTML = '✅ Model załadowany! Gotowy do rozpoznawania mowy.';
      recordBtn.disabled = false;

    } catch (error) {
      console.error('Błąd:', error);
      statusEl.innerHTML = '❌ Błąd ładowania: ' + error.message;
    }
  }

  // Language selection
  document.querySelectorAll('.lang-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      selectedLanguage = btn.dataset.lang;
      document.querySelectorAll('.lang-btn').forEach(b => {
        b.classList.remove('active', 'bg-blue-500/40', 'border-cyan-400');
        b.classList.add('bg-blue-500/20', 'border-blue-500/30');
      });
      btn.classList.add('active', 'bg-blue-500/40', 'border-cyan-400');
      btn.classList.remove('bg-blue-500/20', 'border-blue-500/30');
    });
  });

  // Recording toggle
  recordBtn.addEventListener('click', async () => {
    if (!isRecording) {
      await startRecording();
    } else {
      await stopRecording();
    }
  });

  async function startRecording() {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      mediaRecorder = new MediaRecorder(stream);
      audioChunks = [];

      mediaRecorder.ondataavailable = (event) => {
        audioChunks.push(event.data);
      };

      mediaRecorder.onstop = async () => {
        const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
        await transcribeAudio(audioBlob);
      };

      mediaRecorder.start();
      isRecording = true;
      recordBtn.textContent = '⏹️ Zatrzymaj nagrywanie';
      recordBtn.classList.add('animate-pulse', 'from-red-600', 'to-red-800');
      recordBtn.classList.remove('from-blue-600', 'to-blue-800');
      statusEl.innerHTML = '🔴 Nagrywanie... Mów teraz!';

    } catch (error) {
      statusEl.innerHTML = '❌ Błąd mikrofonu: ' + error.message;
    }
  }

  async function stopRecording() {
    if (mediaRecorder && isRecording) {
      mediaRecorder.stop();
      mediaRecorder.stream.getTracks().forEach(track => track.stop());
      isRecording = false;
      recordBtn.textContent = '🎤 Rozpocznij nagrywanie';
      recordBtn.classList.remove('animate-pulse', 'from-red-600', 'to-red-800');
      recordBtn.classList.add('from-blue-600', 'to-blue-800');
      statusEl.innerHTML = '⏳ Przetwarzanie...';
    }
  }

  async function transcribeAudio(audioBlob) {
    try {
      statusEl.innerHTML = '🧠 Rozpoznawanie mowy...';

      const result = await transcriber(audioBlob, {
        language: selectedLanguage,
        task: 'transcribe'
      });

      const transcription = result.text || result;

      if (outputEl.classList.contains('empty')) {
        outputEl.classList.remove('empty');
        outputEl.innerHTML = '';
      }

      const timestamp = new Date().toLocaleTimeString('pl-PL');
      outputEl.innerHTML += `<div class="mb-4">
        <strong class="text-cyan-400">[${timestamp}]</strong><br>
        ${transcription}
      </div>`;

      statusEl.innerHTML = '✅ Gotowe! Możesz nagrać kolejne.';

    } catch (error) {
      statusEl.innerHTML = '❌ Błąd: ' + error.message;
    }
  }

  // Clear output
  document.getElementById('clearBtn').addEventListener('click', () => {
    outputEl.innerHTML = 'Naciśnij przycisk nagrywania i zacznij mówić...';
    outputEl.classList.add('empty');
  });

  // Initialize on load
  window.addEventListener('load', initModel);
</script>

<style>
  .empty {
    color: #666;
    font-style: italic;
  }

  .lang-btn.active {
    background: rgba(59, 130, 246, 0.4) !important;
    border-color: rgb(34, 211, 238) !important;
  }
</style>
