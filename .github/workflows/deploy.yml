name: Deploy MyBonzo AI Blog with Cloudflare

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Manualny trigger

env:
  NODE_VERSION: 20
  WRANGLER_VERSION: latest

jobs:
  # Job 1: Testowanie i validacja
  test_and_validate:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript check
        run: npx astro check

      - name: Run tests (if available)
        run: npm test --if-present

      - name: Build for testing
        run: npm run build

      - name: Validate build output
        run: |
          echo "‚úÖ Checking build artifacts..."
          ls -la ./dist
          echo "üìä Bundle size analysis:"
          du -sh ./dist/*

  # Job 2: Deploy na production
  deploy_production:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: production
      url: https://www.mybonzoaiblog.com

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Generate Wrangler types
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          if [ -n "$CLOUDFLARE_API_TOKEN" ]; then
            echo "üîß Generating Wrangler types..."
            npx wrangler@${{ env.WRANGLER_VERSION }} types
          else
            echo "‚ö†Ô∏è Skipping type generation - no API token"
          fi

      - name: Build Astro site
        run: |
          echo "üèóÔ∏è Building Astro application..."
          npm run build

          echo "üìä Build summary:"
          echo "‚Ä¢ Total files: $(find ./dist -type f | wc -l)"
          echo "‚Ä¢ Total size: $(du -sh ./dist | cut -f1)"
          echo "‚Ä¢ Assets:"
          ls -la ./dist/_assets/ 2>/dev/null || echo "  No assets directory"

      - name: Deploy to Cloudflare Pages
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          if [ -z "$CLOUDFLARE_API_TOKEN" ]; then
            echo "‚ùå Missing GitHub Secrets!"
            echo ""
            echo "üîß Required secrets in GitHub repository settings:"
            echo "1. CLOUDFLARE_API_TOKEN - Cloudflare API token with Pages:Edit permissions"
            echo "2. CLOUDFLARE_ACCOUNT_ID - 7f490d58a478c6baccb0ae01ea1d87c3"
            echo ""
            echo "ÔøΩ To create API token:"
            echo "1. Go to https://dash.cloudflare.com/profile/api-tokens"
            echo "2. Create Custom Token with:"
            echo "   ‚Ä¢ Permissions: Zone:Zone:Read, Zone:Page Rules:Edit, Account:Cloudflare Pages:Edit"
            echo "   ‚Ä¢ Account Resources: Include - Your Account"
            echo "   ‚Ä¢ Zone Resources: Include - All zones from account"
            echo ""
            echo "ÔøΩüìÅ Built files are ready in ./dist directory"
            echo "üöÄ Manual deployment command:"
            echo "   npx wrangler pages deploy ./dist --project-name=mybonzoaiblog"
            exit 1
          fi

          echo "ÔøΩ Deploying to Cloudflare Pages..."
          echo "üìã Deployment info:"
          echo "‚Ä¢ Project: mybonzoaiblog"
          echo "‚Ä¢ Account: $CLOUDFLARE_ACCOUNT_ID"
          echo "‚Ä¢ Environment: production"
          echo "‚Ä¢ Build output: ./dist"

          # Deploy g≈Ç√≥wny
          echo ""
          echo "üåê Deploying to production..."
          npx wrangler pages deploy ./dist \
            --project-name=mybonzoaiblog

          deployment_status=$?

          if [ $deployment_status -eq 0 ]; then
            echo ""
            echo "‚úÖ Deployment successful!"
            echo ""
            echo "üåê Live URLs:"
            echo "‚Ä¢ Primary: https://mybonzoaiblog.pages.dev"
            echo "‚Ä¢ Custom: https://www.mybonzoaiblog.com"
            echo "‚Ä¢ CDN: All global edge locations active"
            echo ""
            echo "ÔøΩ Features deployed:"
            echo "‚Ä¢ ‚úÖ Astro SSR with Cloudflare adapter"
            echo "‚Ä¢ ‚úÖ AI Workers bindings"
            echo "‚Ä¢ ‚úÖ R2 media storage"
            echo "‚Ä¢ ‚úÖ KV session management"
            echo "‚Ä¢ ‚úÖ Queue processing"
            echo ""
            echo "üìä Next steps:"
            echo "1. Verify site functionality at URLs above"
            echo "2. Check AI API endpoints: /api/ai/*"
            echo "3. Test media uploads: /api/media/upload"
            echo "4. Monitor Cloudflare dashboard for metrics"
            
          else
            echo ""
            echo "‚ùå Deployment failed!"
            echo "üìã Exit code: $deployment_status"
            echo "üîç Check the logs above for detailed error information"
            echo ""
            echo "üõ†Ô∏è Common fixes:"
            echo "1. Verify wrangler.jsonc configuration"
            echo "2. Check account permissions and quotas"
            echo "3. Ensure all required bindings exist"
            exit 1
          fi

      - name: Post-deployment health check
        run: |
          echo "üîç Starting comprehensive health check..."

          # Wait for deployment propagation
          sleep 30

          # Initialize counters
          success_count=0
          total_checks=3

          # Function to test endpoint with retries
          test_endpoint() {
            local url=$1
            local name=$2
            local max_attempts=3
            
            for attempt in $(seq 1 $max_attempts); do
              echo "Attempt $attempt/$max_attempts for $url"
              if curl -f -s --connect-timeout 10 --max-time 30 "$url" > /dev/null 2>&1; then
                echo "‚úÖ SUCCESS: $url (200) - Response time: $(curl -f -s -w '%{time_total}s' --connect-timeout 10 --max-time 30 "$url" -o /dev/null 2>/dev/null || echo 'N/A')"
                return 0
              else
                echo "‚ö†Ô∏è ATTEMPT $attempt FAILED: $url"
                if [ $attempt -lt $max_attempts ]; then
                  sleep 5
                fi
              fi
            done
            echo "‚ùå FAILED: $name after $max_attempts attempts"
            return 1
          }

          # Test main site
          if test_endpoint "https://mybonzoaiblog.pages.dev" "Main site"; then
            ((success_count++))
          fi

          # Test AI API health endpoint
          if test_endpoint "https://mybonzoaiblog.pages.dev/api/ai/chat" "AI API health"; then
            ((success_count++))
          fi

          # Test blog API
          if test_endpoint "https://mybonzoaiblog.pages.dev/api/blog/index" "Blog API"; then
            ((success_count++))
          fi

          # Summary
          echo ""
          echo "üìä Health Check Summary:"
          echo "‚úÖ Passed: $success_count/$total_checks"

          if [ $success_count -eq $total_checks ]; then
            echo "üéâ All health checks passed! Deployment pipeline completed successfully!"
            exit 0
          elif [ $success_count -gt 0 ]; then
            echo "‚ö†Ô∏è Partial success - some endpoints may need time to fully propagate"
            echo "üéâ Deployment pipeline completed with warnings"
            exit 0
          else
            echo "‚ùå Health check failed - please investigate deployment"
            exit 1
          fi

  # Job 3: Preview deployment dla PR
  deploy_preview:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    environment:
      name: preview

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build for preview
        run: npm run build

      - name: Deploy Preview
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          if [ -z "$CLOUDFLARE_API_TOKEN" ]; then
            echo "‚ö†Ô∏è Missing CLOUDFLARE_API_TOKEN secret - skipping preview deployment"
            echo "Preview deployments require API token to be configured in repository secrets"
            exit 0
          fi

          echo "üöÄ Deploying preview..."
          npx wrangler pages deploy ./dist --project-name=mybonzoaiblog

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üöÄ Preview deployment ready!\n\nüìã **Preview URL:** https://mybonzoaiblog.pages.dev\n\n‚úÖ Features available in preview:\n- Astro SSR\n- AI API endpoints\n- Media upload\n- All static assets\n\n‚ö° Deployed from commit: ' + context.sha.substring(0, 7)
            })
