---
/* Component for managing resource hints to optimize resource loading.
 *
 * Props:
 * - dnsPrefetchUrls: string[] - URLs for DNS prefetching
 * - preconnectUrls: Array of connection configs {
 *     href: string,
 *     crossorigin?: boolean
 *   }
 * - preloadResources: Array of resource configs {
 *     href: string,
 *     as: string,
 *     type?: string
 *   }
 * - prefetchResources: string[] - Resources to prefetch
 *
 * Example usage:
 * <ResourceLinks
 *   // Pre-resolve DNS for external domains
 *   dnsPrefetchUrls={['https://fonts.googleapis.com']}
 *
 *   // Early connection setup for critical resources
 *   preconnectUrls={[{
 *     href: 'https://fonts.googleapis.com',
 *     crossorigin: true
 *   }]}
 *
 *   // High-priority resource loading
 *   preloadResources={[{
 *     href: '/fonts/custom-font.woff2',
 *     as: 'font',
 *     type: 'font/woff2'
 *   }]}
 *
 *   // Background loading for future navigation
 *   prefetchResources={['/next-page.js']}
 * />
 *
 * Notes:
 * - dns-prefetch: Best for third-party domains
 * - preconnect: Use sparingly, as it's resource-intensive
 * - preload: For critical above-the-fold resources
 * - prefetch: For likely next-page resources
 */

interface ResourceLinksProps {
	dnsPrefetchUrls?: string[];
	preconnectUrls?: { href: string; crossorigin?: boolean }[];
	preloadResources?: { href: string; as: string; type?: string }[];
	prefetchResources?: string[];
}

const {
	dnsPrefetchUrls = [],
	preconnectUrls = [],
	preloadResources = [],
	prefetchResources = [],
} = Astro.props as ResourceLinksProps;
---

{dnsPrefetchUrls?.map((url) => <link rel="dns-prefetch" href={url} />)}

{
	preconnectUrls?.map(({ href, crossorigin }) => (
		<link
			rel="preconnect"
			href={href}
			crossorigin={crossorigin ? "anonymous" : undefined}
		/>
	))
}

{
	preloadResources?.map(({ href, as, type }) => (
		<link rel="preload" href={href} as={as} type={type} />
	))
}

{prefetchResources?.map((url) => <link rel="prefetch" href={url} />)}
